package com.huangyezhaobiao.push;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import com.huangyezhaobiao.R;
import com.huangyezhaobiao.activity.MainActivity;
import com.huangyezhaobiao.activity.OrderDetailActivity;
import com.huangyezhaobiao.application.BiddingApplication;
import com.huangyezhaobiao.bean.push.PushBean;
import com.huangyezhaobiao.inter.INotificationListener;
import com.huangyezhaobiao.utils.CommonUtils;
import com.huangyezhaobiao.utils.PushUtils;
import com.huangyezhaobiao.utils.StateUtils;
import com.huangyezhaobiao.utils.WindowUtils;
import com.xiaomi.mipush.sdk.ErrorCode;
import com.xiaomi.mipush.sdk.MiPushClient;
import com.xiaomi.mipush.sdk.MiPushCommandMessage;
import com.xiaomi.mipush.sdk.MiPushMessage;
import com.xiaomi.mipush.sdk.PushMessageReceiver;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.widget.Toast;

/**
 * 1、PushMessageReceiver是个抽象类，该类继承了BroadcastReceiver。
 * 2、需要将自定义的DemoMessageReceiver注册在AndroidManifest.xml文件中 <receiver
 * android:exported="true"
 * android:name="com.xiaomi.mipushdemo.DemoMessageReceiver"> <intent-filter>
 * <action android:name="com.xiaomi.mipush.RECEIVE_MESSAGE" /> </intent-filter>
 * <intent-filter> <action android:name="com.xiaomi.mipush.ERROR" />
 * </intent-filter> <intent-filter>
 *  <action android:name="com.xiaomi.mipush.MESSAGE_ARRIVED" /></intent-filter>
 *  </receiver>
 * 3、DemoMessageReceiver的onReceivePassThroughMessage方法用来接收服务器向客户端发送的透传消息
 * 4、DemoMessageReceiver的onN  otificationMessageClicked方法用来接收服务器向客户端发送的通知消息，
 * 这个回调方法会在用户手动点击通知后触发
 * 5、DemoMessageReceiver的onNotificationMessageArrived方法用来接收服务器向客户端发送的通知消息，
 * 这个回调方法是在通知消息到达客户端时触发。另外应用在前台时不弹出通知的通知消息到达客户端也会触发这个回调函数
 * 6、DemoMessageReceiver的onCommandResult方法用来接收客户端向服务器发送命令后的响应结果
 * 7、DemoMessageReceiver的onReceiveRegisterResult方法用来接收客户端向服务器发送注册命令后的响应结果
 * 8、以上这些方法运行在非UI线程中
 * 
 * @author linyueyang
 */
public class BiddingMessageReceiver extends PushMessageReceiver {
    private WindowUtils windowUtils;
    @Override
    public void onReceivePassThroughMessage(final Context context, final MiPushMessage message){
        Log.v(BiddingApplication.TAG,
                "onReceivePassThroughMessage is called. " + message.toString());
        //Log.e("ashenPush", "aaaa");
        CommonUtils.message = message.toString();
        final String log = context.getString(R.string.recv_passthrough_message, message.getContent());
//        BiddingApplication app = (BiddingApplication) context.getApplicationContext();
//        if(app!=null){
//        	final INotificationListener listener = app.getCurrentNotificationListener();
//        	if(listener!=null){
//        		Log.e("ashenPush", "log:"+log);
//        		PushHandler handler = BiddingApplication.getHandler();
//        		handler.post(new Runnable() {
//					@Override
//					public void run() {
//						
//						Log.e("women", "women");
//						
//						int state = StateUtils.getState(context);
//						if(state == 0){
//							PushUtils.notify(context,message);
//						}else{
//							listener.onNotificationCome(PushUtils.dealPushMessage(message));
//						}
//					}
//				});
//        	}
//        }
        Message msg = Message.obtain();
        if (message.isNotified()) {
            msg.obj = log;
        }
        //判断是不是运行
        	//1.true------view显示不通知
        	//2.如果不是----view显示，也要通知
       // BiddingApplication.getHandler().sendMessage(msg);
    }
    /**
     * 应用在后台的时候推送到的方法
     */
    @Override
    public void onNotificationMessageClicked(final Context context, final MiPushMessage message){
        Log.e(BiddingApplication.TAG,
                "onNotificationMessageClicked is called. " + message.toString());
        String log = context.getString(R.string.click_notification_message, message.getContent());
        
        Log.e(BiddingApplication.TAG,
                "onNotificationMessageClicked is called. " + message.getContent());
        
        
		final BiddingApplication app = (BiddingApplication) context.getApplicationContext();
		if (app != null) {
			Log.e("ashenPush", "log:" + log);
			PushHandler handler = BiddingApplication.getHandler();
			handler.post(new Runnable() {
				@Override
				public void run() {

					PushUtils.notify(context, message);
					
					
				}
			});
		}
        
        Message msg = Message.obtain();
        if (message.isNotified()) {
            msg.obj = log;
        }
        BiddingApplication.getHandler().sendMessage(msg);
    }

    
    /**
     * 应用在前台的时候推送到的方法
     */
    @Override
    public void onNotificationMessageArrived(final Context context, final MiPushMessage message){
        Log.e("aaaasasas",
                "onNotificationMessageArrived is called. " + message.toString());
        
        //Toast.makeText(context, "onNotificationMessageArrived",Toast.LENGTH_SHORT).show();
        String log = context.getString(R.string.arrive_notification_message, message.getContent());
        
        Log.e(BiddingApplication.TAG,
                "onNotificationMessageClicked is called. " + message.getContent());
        //MainActivity.logList.add(0, getSimpleDate() + " " + log);
        
        BiddingApplication app = (BiddingApplication) context.getApplicationContext();
        if(app!=null){
        	final INotificationListener listener = app.getCurrentNotificationListener();
        	if(listener!=null){
        		Log.e("ashenPush", "log:"+log);
        		PushHandler handler = BiddingApplication.getHandler();
        		handler.post(new Runnable() {
					@Override
					public void run() {
						
						//Log.e("women", "women");
						
						//int state = StateUtils.getState(context);
//						if(state == 0){
//							PushUtils.notify(context,message);
//						}else{
						PushBean bean  = PushUtils.dealPushMessage(context,message);
						Log.e("asasas", "bean:"+(bean==null));
							listener.onNotificationCome(bean);
						//}
					}
				});
        	}
        }
        
        Message msg = Message.obtain();
        if (message.isNotified()) {
            msg.obj = log;
        }
        BiddingApplication.getHandler().sendMessage(msg);
    }

    @Override
    public void onCommandResult(Context context, MiPushCommandMessage message) {
        Log.v(BiddingApplication.TAG,
                "onCommandResult is called. " + message.toString());
        //Toast.makeText(context, "onCommandResult",Toast.LENGTH_SHORT).show();
        String command = message.getCommand();
        List<String> arguments = message.getCommandArguments();
        String cmdArg1 = ((arguments != null && arguments.size() > 0) ? arguments.get(0) : null);
        String cmdArg2 = ((arguments != null && arguments.size() > 1) ? arguments.get(1) : null);
        String log = "";
        if (MiPushClient.COMMAND_REGISTER.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.register_success);
            } else {
                log = context.getString(R.string.register_fail);
            }
        } else if (MiPushClient.COMMAND_SET_ALIAS.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.set_alias_success, cmdArg1);
            } else {
                log = context.getString(R.string.set_alias_fail, message.getReason());
            }
        } else if (MiPushClient.COMMAND_UNSET_ALIAS.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.unset_alias_success, cmdArg1);
            } else {
                log = context.getString(R.string.unset_alias_fail, message.getReason());
            }
        }  else if (MiPushClient.COMMAND_SET_ACCOUNT.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.set_account_success, cmdArg1);
            } else {
                log = context.getString(R.string.set_account_fail, message.getReason());
            }
        } else if (MiPushClient.COMMAND_UNSET_ACCOUNT.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.unset_account_success, cmdArg1);
            } else {
                log = context.getString(R.string.unset_account_fail, message.getReason());
            }
        } else if (MiPushClient.COMMAND_SUBSCRIBE_TOPIC.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.subscribe_topic_success, cmdArg1);
            } else {
                log = context.getString(R.string.subscribe_topic_fail, message.getReason());
            }
        } else if (MiPushClient.COMMAND_UNSUBSCRIBE_TOPIC.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.unsubscribe_topic_success, cmdArg1);
            } else {
                log = context.getString(R.string.unsubscribe_topic_fail, message.getReason());
            }
        } else if (MiPushClient.COMMAND_SET_ACCEPT_TIME.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.set_accept_time_success, cmdArg1, cmdArg2);
            } else {
                log = context.getString(R.string.set_accept_time_fail, message.getReason());
            }
        } else {
            log = message.getReason();
        }
        //MainActivity.logList.add(0, getSimpleDate() + "    " + log);
        Message msg = Message.obtain();
        msg.obj = log;
        BiddingApplication.getHandler().sendMessage(msg);
    }

    @Override
    public void onReceiveRegisterResult(Context context, MiPushCommandMessage message){
        Log.v(BiddingApplication.TAG,
                "onReceiveRegisterResult is called. " + message.toString());
        //Toast.makeText(context, "onReceiveRegisterResult",Toast.LENGTH_SHORT).show();
        String command = message.getCommand();
        String log;
        if (MiPushClient.COMMAND_REGISTER.equals(command)) {
            if (message.getResultCode() == ErrorCode.SUCCESS) {
                log = context.getString(R.string.register_success);
            } else {
                log = context.getString(R.string.register_fail);
            }
        } else {
            log = message.getReason();
        }
        Message msg = Message.obtain();
        msg.obj = log;
        BiddingApplication.getHandler().sendMessage(msg);
    }

    @SuppressLint("SimpleDateFormat")
    public static String getSimpleDate() {
        return new SimpleDateFormat("MM-dd hh:mm:ss").format(new Date());
    }

    public static class PushHandler extends Handler {
        private Context context;
        public PushHandler(Context context) {
            this.context = context;
        }
        @Override
        public void handleMessage(Message msg) {
            String s = (String) msg.obj;
        }
    }
}
